/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace KaijuGameFactory {
  export type GameObjectStruct = {
    player: PromiseOrValue<string>;
    gameID: PromiseOrValue<string>;
    score: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type GameObjectStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    player: string;
    gameID: string;
    score: BigNumber;
    timestamp: BigNumber;
  };
}

export interface KaijuGameFactoryInterface extends utils.Interface {
  functions: {
    "SINGAPORE_TIME_DIFF()": FunctionFragment;
    "addToLeaderBoard((address,string,uint256,uint256),uint256)": FunctionFragment;
    "gameContract()": FunctionFragment;
    "gameIdToRandom(string)": FunctionFragment;
    "getDailyWinner()": FunctionFragment;
    "getLeaderBoard()": FunctionFragment;
    "getLeaderBoardByDate(uint16,uint8,uint8)": FunctionFragment;
    "getPersonalBest(address)": FunctionFragment;
    "getRandomNumber(string)": FunctionFragment;
    "getYearMonthDate(uint256)": FunctionFragment;
    "isGameValid(string)": FunctionFragment;
    "leaderBoardByDate(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerPersonalBest(address)": FunctionFragment;
    "setGameContractAddress(address)": FunctionFragment;
    "verify2048game(string,string,uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SINGAPORE_TIME_DIFF"
      | "addToLeaderBoard"
      | "gameContract"
      | "gameIdToRandom"
      | "getDailyWinner"
      | "getLeaderBoard"
      | "getLeaderBoardByDate"
      | "getPersonalBest"
      | "getRandomNumber"
      | "getYearMonthDate"
      | "isGameValid"
      | "leaderBoardByDate"
      | "owner"
      | "playerPersonalBest"
      | "setGameContractAddress"
      | "verify2048game"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SINGAPORE_TIME_DIFF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToLeaderBoard",
    values: [KaijuGameFactory.GameObjectStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameIdToRandom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderBoard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderBoardByDate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersonalBest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getYearMonthDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameValid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderBoardByDate",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerPersonalBest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify2048game",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "SINGAPORE_TIME_DIFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToLeaderBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameIdToRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderBoardByDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPersonalBest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYearMonthDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderBoardByDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerPersonalBest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify2048game",
    data: BytesLike
  ): Result;

  events: {
    "GetRandomNumber(string,uint256)": EventFragment;
    "Verify2048Game(string,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GetRandomNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Verify2048Game"): EventFragment;
}

export interface GetRandomNumberEventObject {
  _gameID: string;
  _randomNumber: BigNumber;
}
export type GetRandomNumberEvent = TypedEvent<
  [string, BigNumber],
  GetRandomNumberEventObject
>;

export type GetRandomNumberEventFilter = TypedEventFilter<GetRandomNumberEvent>;

export interface Verify2048GameEventObject {
  _gameID: string;
  _isValid: boolean;
  _contractScore: BigNumber;
}
export type Verify2048GameEvent = TypedEvent<
  [string, boolean, BigNumber],
  Verify2048GameEventObject
>;

export type Verify2048GameEventFilter = TypedEventFilter<Verify2048GameEvent>;

export interface KaijuGameFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KaijuGameFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SINGAPORE_TIME_DIFF(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToLeaderBoard(
      game: KaijuGameFactory.GameObjectStruct,
      currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameContract(overrides?: CallOverrides): Promise<[string]>;

    gameIdToRandom(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDailyWinner(
      overrides?: CallOverrides
    ): Promise<[KaijuGameFactory.GameObjectStructOutput]>;

    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<[KaijuGameFactory.GameObjectStructOutput[]]>;

    getLeaderBoardByDate(
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[KaijuGameFactory.GameObjectStructOutput[]]>;

    getPersonalBest(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRandomNumber(
      gameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getYearMonthDate(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number, number]>;

    isGameValid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leaderBoardByDate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerPersonalBest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setGameContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify2048game(
      _gameID: PromiseOrValue<string>,
      _moves: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _cid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  SINGAPORE_TIME_DIFF(overrides?: CallOverrides): Promise<BigNumber>;

  addToLeaderBoard(
    game: KaijuGameFactory.GameObjectStruct,
    currentTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameContract(overrides?: CallOverrides): Promise<string>;

  gameIdToRandom(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDailyWinner(
    overrides?: CallOverrides
  ): Promise<KaijuGameFactory.GameObjectStructOutput>;

  getLeaderBoard(
    overrides?: CallOverrides
  ): Promise<KaijuGameFactory.GameObjectStructOutput[]>;

  getLeaderBoardByDate(
    year: PromiseOrValue<BigNumberish>,
    month: PromiseOrValue<BigNumberish>,
    day: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<KaijuGameFactory.GameObjectStructOutput[]>;

  getPersonalBest(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRandomNumber(
    gameId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getYearMonthDate(
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, number, number]>;

  isGameValid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leaderBoardByDate(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerPersonalBest(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setGameContractAddress(
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify2048game(
    _gameID: PromiseOrValue<string>,
    _moves: PromiseOrValue<string>,
    _score: PromiseOrValue<BigNumberish>,
    _cid: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SINGAPORE_TIME_DIFF(overrides?: CallOverrides): Promise<BigNumber>;

    addToLeaderBoard(
      game: KaijuGameFactory.GameObjectStruct,
      currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gameContract(overrides?: CallOverrides): Promise<string>;

    gameIdToRandom(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDailyWinner(
      overrides?: CallOverrides
    ): Promise<KaijuGameFactory.GameObjectStructOutput>;

    getLeaderBoard(
      overrides?: CallOverrides
    ): Promise<KaijuGameFactory.GameObjectStructOutput[]>;

    getLeaderBoardByDate(
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<KaijuGameFactory.GameObjectStructOutput[]>;

    getPersonalBest(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumber(
      gameId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYearMonthDate(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, number, number]>;

    isGameValid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leaderBoardByDate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerPersonalBest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGameContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verify2048game(
      _gameID: PromiseOrValue<string>,
      _moves: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _cid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, boolean, BigNumber]>;
  };

  filters: {
    "GetRandomNumber(string,uint256)"(
      _gameID?: PromiseOrValue<string> | null,
      _randomNumber?: null
    ): GetRandomNumberEventFilter;
    GetRandomNumber(
      _gameID?: PromiseOrValue<string> | null,
      _randomNumber?: null
    ): GetRandomNumberEventFilter;

    "Verify2048Game(string,bool,uint256)"(
      _gameID?: PromiseOrValue<string> | null,
      _isValid?: null,
      _contractScore?: null
    ): Verify2048GameEventFilter;
    Verify2048Game(
      _gameID?: PromiseOrValue<string> | null,
      _isValid?: null,
      _contractScore?: null
    ): Verify2048GameEventFilter;
  };

  estimateGas: {
    SINGAPORE_TIME_DIFF(overrides?: CallOverrides): Promise<BigNumber>;

    addToLeaderBoard(
      game: KaijuGameFactory.GameObjectStruct,
      currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameContract(overrides?: CallOverrides): Promise<BigNumber>;

    gameIdToRandom(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDailyWinner(overrides?: CallOverrides): Promise<BigNumber>;

    getLeaderBoard(overrides?: CallOverrides): Promise<BigNumber>;

    getLeaderBoardByDate(
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPersonalBest(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomNumber(
      gameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getYearMonthDate(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGameValid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leaderBoardByDate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerPersonalBest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGameContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify2048game(
      _gameID: PromiseOrValue<string>,
      _moves: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _cid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SINGAPORE_TIME_DIFF(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToLeaderBoard(
      game: KaijuGameFactory.GameObjectStruct,
      currentTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameIdToRandom(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDailyWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeaderBoard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLeaderBoardByDate(
      year: PromiseOrValue<BigNumberish>,
      month: PromiseOrValue<BigNumberish>,
      day: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPersonalBest(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomNumber(
      gameId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getYearMonthDate(
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGameValid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leaderBoardByDate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerPersonalBest(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGameContractAddress(
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify2048game(
      _gameID: PromiseOrValue<string>,
      _moves: PromiseOrValue<string>,
      _score: PromiseOrValue<BigNumberish>,
      _cid: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
